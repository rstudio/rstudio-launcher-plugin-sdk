@startuml

package System <<Rectangle>>
{
  class User
  {
    + User(in_username : const std::string&)
    + User(in_userId : int, in_groupId : int)
    + isAllUsers() : bool
    + username() : const std::string&
    + homeDir(out_homeDir : FilePath&) : Error
    + group(out_userGroup : std::string&) : Error
    + id(out_userId : std::string&) : Error
    - m_username : std::string
    - m_isAllUsers : bool
  }
  note bottom of User : The homeDir, group, and id\nmethods may be implemented\nlater, as needed.

  class AsioService
  {
    + {static} asioService() : boost::asio::io_service&
    - s_ioService : boost::asio::io_service
    - s_mutex : boost::mutex
  }

  class AbstractTimedEvent
  {
    + AbstractTimedEvent(in_timer : const TimeDuration&)
    + start() : void
    + cancel() : void
    # {abstract} onTimer(in_error : const Error&) : void
    - m_timeout : boost::posix::time_duration
    - m_deadlineTimer : std::shared_ptr<boost::asio::deadline_timer>
    - m_mutex : boost::mutex
    - m_isCanceled : bool
  }

  class Error
  {
    + Error(in_code : int, in_message : const std::string&, in_location : const ErrorLocation&)
    - m_errorCode : int
    - m_errorMessage : std::string
    - m_location : ErrorLocation
  }

  class ErrorLocation
  {
    + ErrorLocation(in_file : const std::string&, in_line : long int, in_function : const std::string&)
    - m_line : long int
    - m_file : std:string
    - m_function : std::string
  }

  class FilePath
  class AsioSupervisor #lightgreen
  class Process #lightgreen
  class ProcessOptions #lightgreen
  class ProcessResult <<struct>> #lightgreen
  class ProcessCallbacks <<struct>> #lightgreen
  class AsioAsyncChildProcess #lightgreen

  AsioSupervisor -[hidden] Process
  Process -[hidden] ProcessOptions
  ProcessOptions -[hidden]- ProcessResult
  ProcessResult -[hidden] ProcessCallbacks
  ProcessCallbacks -[hidden] AsioAsyncChildProcess

  AbstractTimedEvent --> AsioService : use
}

package "Typedef Reference" as TDPackage <<Rectangle>>
{
  hide <<typedef>> circle
  hide <<typedef>> methods

  class OnError <<typedef>>
  {
    {field} std::function<void(const Error&)>
  }

  class OnJobStatusUpdate <<typedef>>
  {
    {field} std::function<void(JobPtr)>
  }

  class OnTimer <<typedef>>
  {
    {field} std::function<void(bool)>
  }

  class OnOperationComplete <<typedef>>
  {
    {field} std::function<void()>
  }

  class OnJobPrune <<typedef>>
  {
    {field} std::function<void(std::shared_ptr<Job>, const OnOperationComplete&, const OnError&)>
  }

  class OnBootstrap <<typedef>>
  {
    {field} std::function<void(std::shared_ptr<BootstrapRequest>)>
  }

  class OnGetJobStatuses <<typedef>>
  {
    {field} std::function<void(const JobList&)>
  }

  class OnGetJob <<typedef>>
  {
    {field} std::function<void(std::shared_ptr<Job>)>
  }

  class OnGetNetworkInfo <<typedef>>
  {
    {field} std::function<void(const NetworkInfo&)>
  }

  class OnGetClusterInfo <<typedef>>
  {
    {field} std::function<void(const ClusterInfo&)>
  }

  class OnControlJob <<typedef>>
  {
    {field} std::function<void(const ControlJobResult&)>
  }

  class OnResourceUtilData <<typedef>>
  {
    {field} std::function<void(const ResourceUtilization&)>
  }

  class OnOutputStreamData <<typedef>>
  {
    {field} std::function<void(JobOutputType, const std::string&)>
  }

  class JobList <<typedef>>
  {
    std::vector<std::shared_ptr<Job>>
  }

  class JobStatusSubscriptionHandle <<typedef>>
  {
    std::shared_ptr<JobStatusSubscription>
  }

  class JobStatusSignal <<typedef>>
  {
    {field} boost::signals2::signal<void(JobPtr)>
  }

  class JobIdMap <<typedef>>
  {
    std::map<std::string, std::shared_ptr<Job>>
  }

  class RequestHandler <<typedef>>
  {
    boost::variant<*Request>
  }

  OnError -[hidden] OnJobStatusUpdate
  OnJobStatusUpdate -[hidden] OnTimer
  OnTimer -[hidden] OnJobDeleted
  OnJobDeleted -[hidden] OnJobPrune
  OnError -down[hidden]- OnGetJobStatuses
  OnGetJobStatuses -[hidden]- OnBootstrap

  OnGetJobStatuses -down[hidden] JobList
  JobList -[hidden] JobStatusSubscriptionHandle
  JobStatusSubscriptionHandle -[hidden] JobStatusSignal
  JobStatusSignal -[hidden] JobIdMap
}

package Options <<Rectangle>>
{
  interface IOptions
  {
    + {abstract} initialize() : Error
    + {abstract} readOptions(in_location : const FilePath&) : Error
    + {abstract} getOption<typename N>(in_name : const std::string&, out_value : N&) : Error
    # {abstract} registerOption<typename N>(const std::string& in_name, std::weak_ptr<N> io_valuePtr, const N& in_defaultValue, const std::string& in_description) : void
    # IOptions()
  }

  class AbstractOptions <<template T>> #lightblue
  {
    + {static} options() : AbstractOptions&
    + {abstract} initialize() : Error
    + readOptions(const FilePath& in_location) : Error
    + getScratchPath() : const std::string&
    + getJobExpiryHours() : unsigned int
    + getServerUser() : User
    + getLogLevel() : LogLevel
    + isDebugLoggingEnabled() : bool
    + getThreadPoolSize() : unsigned int
    + getHeartbeatIntervalSeconds() : unsigned int
    # registerOption<typename N>(const std::string& name, std::weak_ptr<N> io_valuePtr, const N& in_defaultValue, const std::string& in_description) : void
    # AbstractOptions(const std::string& in_defaultConfigFile)
    - m_optionsDesc : boost::program_options::options_description
    - m_scratchPath : std::string
    - m_jobExpiryHours : unsigned int
    - m_serverUser : std::string
    - m_logLevel : std::string
    - m_enableDebugLogging : bool
    - m_threadPoolSize : unsigned int
    - m_heartbeatIntervalSeconds : unsigned int
  }

  class AbstractUserProfiles <<template T>> #lightblue
  {
    + {static} userProfiles() : AbstractUserProfiles&
    + {abstract} initialize() : Error
    + readOptions(const FilePath& in_location) : Error
    # registerOption<typename N>(const std::string& name, std::weak_ptr<N> io_valuePtr, const N& in_defaultValue, const std::string& in_description) : void
    - m_confProfile : ConfigProfile
  }

  AbstractUserProfiles *-- ConfigProfile
  AbstractUserProfiles ..|> IOptions
  AbstractOptions ..|> IOptions
}

package Logging <<Rectangle>>
{
  enum LogLevel <<enum class>>
  {
    + OFF = 0
    + ERROR = 1
    + WARNING = 2
    + DEBUG = 3
    + INFO = 4
    + {static} fromString(in_logLevelStr : const std::string&) : std::string
  }

  class Logger
  {
    + {static} logger(in_programId : const std::string&) : Logger&
    + setLogLevel(in_logLevel : LogLevel) : void
    + addLogDestination(in_destination : std::shared_ptr<ILogDestination>) : void
    + removeLogDestination(in_destId : unsigned int) : void
    + logError(in_error : const Error&) : void
    + logErrorAsWarning(in_error : const Error&) : void
    + logErrorAsDebug(in_error : const Error&) : void
    + logErrorAsInfo(in_error : const Error&) : void
    + logErrorMessage(in_message : const std::string&) : void
    + logWarningMessage(in_message : const std::string&) : void
    + logDebugMessage(in_message : const std::string&) : void
    + logInfoMessage(in_message : const std::string&) : void
    - formatLogEntry(in_message : const std::string&, in_escapeNewLines : bool)
    - {static} s_mutex : boost::mutex
    - m_logDestinations : std::map<unsigned int, std::shared_ptr<ILogDestination>>
    - m_logLevel : LogLevel
    - m_programId : std::string
  }

  class ILogDestination
  {
    + {abstract} getId() : unsigned int
    + {abstract} writeLog(in_programId : const std::string&, in_message : const std::string&)
  }

  class SysLogDestination
  {
    + getId() : unsigned int
    + writeLog(in_programId : const std::string&, in_message : const std::string&)
  }

  class StdErrLogDestination
  {
    + getId() : unsigned int
    + writeLog(in_programId : const std::string&, in_message : const std::string&)
  }

  class FileLogDestination #lightgreen
  {
    + FileLogWriter(in_id : unsigned int, in_logDir : const FilePath&, in_logName : const std::string&)
    + getId()
    + writeLog(in_programId : const std::string&, in_message : const std::string&)
    - m_logFile : const FilePath&
    - m_rotatedLogFile : const FilePath&
    - m_id : unsigned int
  }
}

@enduml
