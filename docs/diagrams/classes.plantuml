@startuml
scale 4096x4096
skinparam stereotypeCBackgroundColor<<Struct>> pink
skinparam spotChar<<Struct>> S
hide interface field

package "Job Management" as JMPackage <<Rectangle>>
{
  interface IJobRepository
  {
    + {abstract} getJobs(in_user : const std::string&) : JobList
    + {abstract} getJob(in_id : const std::string&, in_user : const std::string&) : std::shared_ptr<Job>
    + {abstract} addJob(in_job : std::shared_ptr<Job>)
    + {abstract} removeJob(in_id : const std::string&) : void
  }

  class JobRepository
  {
    + getJobs(in_user : const std::string&) : JobList
    + getJob(in_id : const std::string&, in_user : const std::string&) : std::shared_ptr<Job>
    + addJob(in_job : std::shared_ptr<Job>) : Error
    + removeJob(in_id : const std::string&) : void
    - m_jobs : JobIdMap
    - m_mutex : Mutex
  }

  class JobPruner
  {
    + JobPruner(in_jobRepo : std::shared_ptr<IJobRepository>, in_jobSource : std::shared_ptr<IJobSource>, in_onJobPrune : const OnJobPrune&)
    - onJobStatusUpdate(in_job : std::shared_ptr<Job>) : void
    - scheduleJobPrune(in_job : std::weak_ptr<Job>, in_pruneTime : boost::posix::posix_time)
    - m_jobRepo : std::shared_ptr<IJobRepository>
    - m_jobSource : std::shared_ptr<IJobSource>
    - m_onJobPrune : OnJobPrune
    - m_jobExpiryTime : boost::posix::time_duration
  }

  class JobStatusNotifier
  {
    + update(in_job : std::shared_ptr<Job>, in_status : JobStatus, in_statusMessage : const std::string&, in_invocationTime : boost::posix_time::ptime) : void
    + subscribe(in_onUpdate : const OnJobStatusUpdate&) : JobStatusSubscriptionHandle
    + subscribe(in_jobId : const std::string&, in_onUpdate : const OnJobStatusUpdate&) : JobStatusSubscriptionHandle
    - std::map<std::string, JobStatusSignal>
  }

  class JobStatusSubscription
  {
    + JobStatusSubscription(\n  in_parent : const std::weak_ptr<JobStatusNotifier>&,\n  in_jobId : const std::string&,\n  in_conn : const boost::signals2::connection&)
    - m_parent : std::weak_ptr<JobStatusNotifier>
    - m_jobId : std::string
    - m_conn : boost::signals2::connection
  }

  class Job <<struct>>
  {
    + {static} fromJson(in_json : const rapid_json::Object&, out_job : std::shared_ptr<Job>) : Error
    + toJson() : rapid_json::object
    + lock() : boost::unique_lock<boost::mutex>
    + matchesTags(in_tags : const std::vector<std::string>&) : bool
    + getJobConfig(in_key : const std::string&, out_value : std::string&) : bool
    + userCanAccess(in_username : const std::string&) : bool
    + Id : std::string
    + Cluster : std::string
    + Name : std::string
    + JobUser : User
    + Queues : std::vector<std::string>
    + WorkingDirectory : std::string
    + Container : boost::optional<Container>
    + ExposedPorts : std::vector<ExposedPort>
    + Mounts : std::vector<Mount>
    + Config : std::vector<Config>
    + ResourceLimits : std::vector<ResourceLimit>
    + Status : JobStatus
    + StatusMessage : std::string
    + Pid : boost::optional<pid_t>
    + ExitCode : boost::optional<int>
    + Command : std::string
    + Exe : std::string
    + Args : std::vector<std::string>
    + StdIn : std::string
    + Tags : std::vector<std::string>
    + Environment : std::vector<std::pair<std::string, std::string>>
    + StdOutFile : std::string
    + StdErrFile : std::string
    + LastUpdateTime : boost::posix_time::ptime
    + SubmissionTime : boost::posix_time::ptime
    + MiscData : std::map<std::string, boost::any>
    - m_mutex : boost::mutex
  }

  class ExposedPort <<struct>>
  {
    + {static} fromJson(in_json : const rapid_json::Object&, out_port : ExposedPort&) : Error
    + toJson() : rapid_json::Object
    + TargetPort : unsigned int
    + PublishedPort : boost::optional<unsigned int>
    + Protocol : std::string
  }

  class HostMount <<struct>>
  {
    + {static} fromJson(in_json : const rapid_json::Object&, out_hostMount : HostMount&) : Error
    + toJson() : rapid_json::Object
    + Path : std::string
  }

  class NfsMount <<struct>>
  {
    + {static} fromJson(in_json : const rapid_json::Object&, out_nfsMount : NfsMount&) : Error
    + toJson() : rapid_json::Object
    + Host : std::string
    + Path : std::string
  }

  class Mount <<struct>>
  {
    + {static} fromJson(in_json : const rapid_json::Object&, out_mount : Mount&) : Error
    + toJson() : rapid_json::Object
    + MountPath : std::string
    + IsReadOnly : bool
    + Mount : boost::variant<HostMount, NfsMount>
  }

  class JobConfig <<struct>>
  {
    + {static} fromJson(in_json : const rapid_json::Object&, out_jobConfig : JobConfig&) : Error
    + toJson() : rapid_json::Object
    + Name : std::string
    + Value : std::string
    + ValueType : JobConfig::ValueType
  }

  class Container <<struct>>
  {
    + {static} fromJson(in_json : const rapid_json::Object&, out_container : Container&) : Error
    + toJson() : rapid_json::Object
    + Image : std::string
    + RunAsUser : boost::optional<User>
  }

  class PlacementConstraint <<struct>>
  {
    + {static} fromJson(in_json : const rapid_json::Object&, out_constraint : PlacementConstraint&) : Error
    + {static} arrayFromString(in_constraintStr : const std::string&, out_constraints : std::vector<PlacementConstraint>&) : Error
    + toJson() : rapid_json::Object
    + Name : std::string
    + Value : std::string
  }

  class ResourceLimit
  {
    + ResourceLimit(in_type : ResourceLimit::Type, in_value : double, in_maxValue = 0.0 : double, in_defaultValue = 0.0 : double)
    + getType() : ResourceLimit::Type
    + getValue() : const std::string&
    + getDefaultValue() : boost::optional<std::string>
    + getMaxValue() : boost::optional<std::string>
    + toJson() :: rapid_json::Object
    - m_type : ResourceLimit::Type
    - m_value : std::string
    - m_defaultValue : boost::optional<std::string>
    - m_maxValue : boost::optional<std::string>
  }

  enum "JobConfig::ValueType" <<enum class>>
  {
    + STRING
    + INT
    + FLOAT
    + ENUM
    + {static} fromString(in_str : const std::string&, out_valueType : JobConfig::ValueType&) : Error
    + {static} toString(in_valueType : JobConfig::ValueType) : std::string
  }

  enum JobStatus <<enum class>>
  {
    + PENDING
    + RUNNING
    + SUSPENDED
    + FINISHED
    + FAILED
    + KILLED
    + CANCELED
    + {static} toString(in_status : JobStatus) : std::string
    + {static} fromString(in_str : const std::string&) : JobStatus
  }

  enum "ResourceLimit::Type" <<enum class>>
  {
    + CpuCount
    + CpuFrequency
    + CpuSet
    + CpuTime
    + Memory
    + MemorySwap
    + {static} fromString(in_str : const std::string&, out_type : ResourceLimit::Type&) : Error
    + {static} toString(in_type : ResourceLimit::Type) : std::string
  }

  JobStatusNotifier "1" *-- "0.." JobStatusSubscription
  JobPruner --> JobStatusNotifier : subscribes
  JobRepository ..|> IJobRepository
  JobPruner --> IJobRepository : updates
}

package "Job System Api" as JobApiPackage <<Rectangle>>
{
  note "This package will be mainly the responsibility of\nthe SDK user. Conceptually, an extension of\nJobRepository or a plugin specific implementation of\nan existing interface or abstract class would belong\nhere but they are not shown as their existence is up\nto the plugin developer." as JSANote
  interface IJobSource #lightblue
  {
    + {abstract} initialize() : Error
    + {abstract} getJobs(in_user : const User&, out_jobs : JobList&) : Error
    + {abstract} getJob(in_jobId : const std::string&, in_user : const User&, in_onGetJob : const OnGetJob&, in_onError : const OnError&) : void
    + {abstract} submitJob(io_job : std::shared_ptr<Job>, in_user : const User&, in_onSubmitJob : const OnControlJob&, in_onError : const OnError&) : void
    + {abstract} suspendJob(in_jobId : const std::string&, in_user : const User&, in_onSuspendJob : const OnControlJob&, in_onError : const OnError&) : void
    + {abstract} resumeJob(in_jobId : const std::string&, in_user : const User&, in_onResumeJob : const OnControlJob&, in_onError : const OnError&) : void
    + {abstract} stopJob(in_jobId : const std::string&, in_user : const User&, in_onStopJob : const OnControlJob&, in_onError : const OnError&) : void
    + {abstract} killJob(in_jobId : const std::string&, in_user : const User&, in_onKillJob : const OnControlJob&, in_onError : const OnError&) : void
    + {abstract} cancelJob(in_jobId : const std::string&, in_user : const User&, in_onCancelJob : const OnControlJob&, in_onError : const OnError&) : void
    + {abstract} getNetworkInfo(in_jobId : const std::string&, in_user : const User&, in_onGetNetworkInfo : const OnGetNetworkInfo&, in_onError : const OnError&) : void
    + {abstract} getClusterInfo(in_user : const User&, in_onGetClusterInfo : const OnGetClusterInfo&, in_onError : const OnError&) : void
    + {abstract} removeJob(in_job : std::shared_ptr<Job>, in_onRemove : const OnOperationComplete&, in_onError : OnError&) : void
    + {abstract} createOutputStream(in_jobId : const std::string&, in_outputType : JobOutputType, in_onData : const OnOutputStreamData&, in_onError : const OnError&) : std::shared_ptr<AbstractOutputStream>
    + {abstract} createResourceUtilStream(in_jobId : const std::string&, in_onResourceData : const OnResourceUtilData&, in_onError : const OnError&) : std::shared_ptr<IResourceUtilStream>
  }

  class AbstractOutputStream
  {
    + AbstractOutputStream(\n   in_jobOutputType : JobOutputType,\n   in_onData : const OnOutputStreamData&,\n   in_onError : const OnError&)
    + {abstract} initialize() : Error
    + {abstract} endStream() : Error
    # completeStream() : void
    # reportOutput(in_outputType : JobOutputType, in_output : const std::string& output) : void
    - getNextSeqId() : uint64_t
    # m_streamType : JobOutputType
    - m_nextSeqId : std::atomic<uint64_t>
    - m_onData : OnOutputStreamData
    - m_onError : OnError
  }

  class FileOutputStream #lightgreen
  {
    + FileOutputStream(in_jobOutputType : JobOutputType, in_stdoutFile : const FilePath&, in_stderrFile : const FilePath&, in_onData : const OnOutputStreamData&, in_onError : const OnError&)
    + initialize() : Error
    + endStream() : Error
    - {static} buildTailCommand(in_file : const FilePath&) : std::string
    - m_stdoutFile : FilePath
    - m_stderrFile : FilePath
  }

  interface IResourceUtilStream #lightblue
  {
    + {abstract} initialize() : Error
    + {abstract} endStream() : Error
    + {abstract} addRequestId(in_requestId : uint64_t) : void
    + {abstract} removeRequestId(in_requestId : uint64_t) : void
  }

  class AbstractResourceUtilStream
  {
    + AbstractResourceUtilStream(in_jobId : const std::string&, in_onData : const OnResourceUtilData&)
    + {abstract} initialize() : Error
    + {abstract} endStream() : Error
    + addRequestId(in_requestId : uint64_t) : void
    + removeRequestId(in_requestId : uint64_t) : void
    # completeStream() : void
    # reportOutput(in_resourceUtilization : const ResourceUtilization&)
    # m_jobId : std::string
    - m_onData : OnResourceUtilData
    - m_requestSequences : std::map<uint64_t, unit64_t>
    - m_mutex : boost::mutex
  }

  class TimedResourceUtilStream #lightgreen
  {
    + TimedResourceUtilStream(in_jobId : const std::string&, in_onData : const OnResourceUtilData&, in_seconds : unsigned int)
    + start() : void
    + cancel() : void
    + initialize() : Error
    + endStream() : Error
    + addRequestId(in_requestId : uint64_t) : void
    + removeRequestId(in_requestId : uint64_t) : void
    # onTimer(in_error : const Error&) : void
    # {abstract} getResourceUtilData() : void
    # reportOutput(in_resourceUtilization : const ResourceUtilization&)
    - m_jobId : std::string
    - m_onData : OnResourceUtilData
    - m_requests : std::map<uint64_t, uint64_t>
    - m_mutex : boost::mutex
  }

  class IJobStatusWatcher #lightblue
  {
    + {abstract} startWatching()
    + {abstract} stopWatching()
  }

  class AbstractJobStatusWatcher
  {
    + AbstractJobStatusWatcher(in_jobRepo : std::shared_ptr<IJobRepository>, io_jobStatusNotifier : std::shared_ptr<JobStatusNotifier>, in_pullStatusSeconds : unsigned int)
    # onTimer(in_error : const Error&) : void
    # {abstract} getJobStatuses(in_onGetJobStatuses : const OnGetJobStatuses&, in_onError : const OnError&) : void
    - m_jobRepo : std::shared_ptr<IJobRepository>
    - m_jobStatusNotifier : std::shared_ptr<JobStatusNotifier>
  }

  IJobStatusWatcher <|.. AbstractJobStatusWatcher
  AbstractJobStatusWatcher --|> AbstractTimedEvent
  IJobStatusWatcher --> JobStatusNotifier : updates
  IResourceUtilStream <|.. AbstractResourceUtilStream
  IResourceUtilStream <|.. TimedResourceUtilStream
  AbstractTimedEvent <|-- TimedResourceUtilStream
}

package "Launcher Plugin Api" as LPApiPackage <<Rectangle>>
{
  note "Classes in this package are responsible for\nhandling the translation from the Launcher\nAPI to and from the IJobSource interface" as LPANote

  class MessageHandler
  {
    + PluginMessageHandler(in_maxMessageSize : unsigned int)
    + handleBytes (in_buffer : const char*, in_length : unsigned int, out_messages : std::vector<std::string>&) : Error
    + {static} parseRequest(in_requestStr : const std::string&, out_request : Request*) : Error
    + {static} formatResponse(in_response : const Response&) : std::string&
    - m_maxMessageSize : unsigned int
    - m_bytesToRead : unsigned int
    - m_buffer : char*
    - m_nextResponseId : std::atomic<unit64_t>
  }

  class AbstractPluginApi #lightblue
  {
    + handleBootstrap(in_bootstrapRequest : std::shared_ptr<BootstrapRequest>) : void
    + handleSubmitJob(in_submitJobRequest : std::shared_ptr<SubmitJobRequest>) : void
    + handleGetJob(in_getJobRequest : std::shared_ptr<GetJobRequest>) : void
    + handleGetJobStatus(in_getJobStatusRequest : std::shared_ptr<GetJobStatusRequest>) : void
    + handleControlJob(in_controlJobRequest : std::shared_ptr<ControlJobRequest>) : void
    + handleGetJobOutput(in_getJobOutputRequest : std::shared_ptr<GetJobOutputRequest>) : void
    + handleGetJobResourceUtil(in_getJobResourceUtilRequest : std::shared_ptr<GetJobResourceUtilRequest>) : void
    + handleGetJobNetwork(in_getJobNetworkRequest : std::shared_ptr<GetJobNetworkRequest>) : void
    + handleGetClusterInfo(in_getClusterInfoRequest : std::shared_ptr<GetClusterInfoRequest>) : void
    # {abstract} createJobSource() : std::shared_ptr<IJobSource>
    # {abstract} createJobRepository() : std::shared_ptr<IJobRepository>
    # {abstract} createJobStatusWatcher() : std::shared_ptr<IJobStatusWatcher>
    - m_jobSource : std::shared_ptr<IJobSource>
    - m_comms : std::shared_ptr<AbstractFrameworkCommunicator>
    - m_statusHandles : std::map<uint64_t, SubscriptionHandle>
    - m_jobRepository : std::shared_ptr<IJobRepository>
    - m_jobStatusNotifier : std::shared_ptr<JobStatusNotifier>
    - m_jobPruner : std::shared_ptr<JobPruner>
    - m_jobStatusWatcher : std::shared_ptr<IJobStatusWatcher>
    - m_outputStreamManager : std::shared_ptr<OutputStreamManager>
    - m_resourceStreamManager : std::shared_ptr<ResourceStreamManager>
  }

  class OutputStreamManager
  {
    + OutputStreamManager(in_jobSource : const std::shared_ptr<IJobSource>&, in_jobStatusNotifier : const std::shared_ptr<JobStatusNotifier>&)
    + createStream(in_jobId : const std::string&, in_outputType: JobOutputType, in_onData : const OnOutputStreamData&) : void
    + cancelStream(in_jobId : const std::string&) : void
    - m_jobStatusNotifier : std::shared_ptr<JobStatusNotifier>
    - m_jobSource : std::shared_ptr<IJobSource>
    - m_outputStreams : std::map<std::string, std::shared_ptr<AbstractOutputStream>>
    - m_jobStatusHandles : std::map<std::string, JobStatusSubscriptionHandle>
    - m_mutex : boost::mutex
  }

  class ResourceStreamManager
  {
    + ResourceStreamManager(in_jobSource : const std::shared_ptr<IJobSource>&, in_jobStatusNotifier : const std::shared_ptr<JobStatusNotifier>&)
    + createStream(in_jobId : const std::string&, in_requestId : uint64_t, in_onData : OnResourceUtilData&)
    + cancelStream(in_jobId : const std::string&, in_requestId : uint64_t)
    + hasStream(in_jobId) : bool
    - m_jobStatusNotifier : std::shared_ptr<JobStatusNotifier>
    - m_jobSource : std::shared_ptr<IJobSource>
    - m_resourceStreams : std::map<std::string, std::shared_ptr<IResourceUtilStream>>
    - m_jobStatusHandles : std::map<std::string, JobStatusSubscriptionHandle>
    - m_mutex : boost::mutex
  }

  class ClusterInfo
  {
    + ClusterInfo(in_name: const std::string&, in_type: const std::string&)
    + ClusterInfo(in_name: const std::string&, in_type: const std::string&, in_queues : const std::vector<std::string>&)
    + ClusterInfo(in_name: const std::string&, in_type: const std::string&, in_resourceLimitTypes : const std::vector<ResourceLimit::Type>&)
    + ClusterInfo(in_name: const std::string&, in_type: const std::string&, in_queues : const std::vector<std::string>&, in_resourceLimitTypes : const std::vector<ResourceLimit::Type>&)
    + toJson() : rapid_json::Object
    - m_name : std::string
    - m_type : std::string
    - m_queues : std::vector<std::string>
    - m_resourceLimitTypes : std::vector<ResourceLimit::Type>
  }

  class NetworkInfo
  {
    + NetworkInfo()
    + NetworkInfo(in_ipAddresses : const std::vector<std::string>&)
    + NetworkInfo(in_host : const std::string&, in_ipAddresses
    - m_host : std::string
    - m_ipAddresses : std::vector<std::string>
  }

  class ControlJobResult
  {
    + ControlJobResult(in_isComplete : bool, in_status : const std::string&)
    + isComplete() : bool
    + getStatusMessage() : const std::string&
    + toJson() : rapid_json::Object
    - m_isComplete : bool
    - m_statusMessage : std::string
  }

  class HeartbeatTimer
  {
    + sendHeartbeat()
    # onTimer(in_error : const Error&) : void
  }
  note "The time duration for these will\ncome from AbstractOptions" as HBNote
  HBNote . HeartbeatTimer

  class AbstractFrameworkCommunicator
  {
    + {abstract} sendResponse(in_response : const Response&) : void
    + start() : Error
    + stop() : void
    + waitForExit() : void
    + registerRequestHandler(in_type : Request::Type, in_handler : const Request
    # {abstract} doWaitForExit() : void
    # {abstract} doStart() : Error
    # {abstract} doStop() : void
    # m_requestHandlers : std::map<Request::Type, RequestHandler>
    # m_heartbeatTimer : std::shared_ptr<HeartbeatTimer>
  }

  class StdIOFrameworkCommunicator
  {
    + sendResponse(in_response : const Response&) : void
    # doWaitForExit() : void
    # doStart() : Error
    # doStop() : void
    - readNext() : Error
    - writeNext() : Error
    - reportError() : Error
    - m_numThreads : unsigned int
    - m_stdinStream : boost::asio::posix::stream_descriptor
    - m_stdoutStream : boost::asio::posix::stream_descriptor
    - m_onError : OnError
    - m_mutex : Mutex
    - m_stdinBuff : std::vector<char>
    - m_writeBuffer : std::queue<std::string>
  }

  class Request
  {
    + {abstract} getType() : Request::Type
    + getUser() : const User&
    + {static} fromJson(in_jsonObject : const rapid_json::Object&, out_request : std::shared_ptr<Request>) : Error
    # Request()
    # m_user : User
  }

  class SubmitJobRequest
  {
    + getJob() : std::shared_ptr<Job>
    - m_job : std::shared_ptr<Job>
  }

  class JobIdRequest
  {
    + getJobId() : const std::string&
    # m_jobId : const std::string&
  }

  class GetJobStatusRequest
  {
    + isCancel() : bool
    - m_isCancel : bool
  }

  class ControlJobRequest
  {
    + getOperation() : ControlOperation
    - m_operation : ControlOperation
  }

  class GetJobOutputRequest
  {
    + getOutputType() : JobOutputType
    + isCancel() : bool
    - m_outputType : JobOutputType
    - m_cancel : bool
  }

  class Response
  {
    + serialize() : std::string
    + {abstract} getType() : Response::Type
    # m_data : rapid_json::Object
  }

  class GetJobResponse
  {
    + GetJobResponse(in_job : std::shared_ptr<Job>)
    - m_job : std::shared_ptr<Job>
  }

  class GetJobStatusResponse
  {
    + GetJobStatusResponse(in_job : std::shared_ptr<Job>)
    - m_job : std::shared_ptr<Job>
  }

  class ControlJobResponse
  {
    + ControlJobResponse(in_result : const ControlJobResult&)
    - m_result : ControlJobResult
  }

  class GetJobOutputResponse
  {
    + GetJobOutputResponse(in_output : const std::string&, in_outputType : JobOutputType, in_isComplete : bool)
    + GetJobOutputResponse(in_isComplete : bool)
    + toJson() : rapid_json::Object
    - m_output : std::string
    - m_outputType : JobOutputType
    - m_isComplete : bool
  }

  class GetJobResourceUtilResponse
  {
    + GetJobResourceUtilResponse(in_cpuTime : const boost::optional<double>&, in_cpuPercent : const boost::optional<double>&, in_virtualMemory : const boost::optional<double>&)
    + toJson() : rapid_json::Object
    - m_cpuTime : boost::optional<double>
    - m_cpuPercent : boost::optional<double>
    - m_residentMemory : boost::optional<double>
    - m_virtualMemory : boost::optional<double>
  }

  class GetJobNetworkResponse
  {
    + GetJobNetworkResponse(in_host : const std::string&, in_ipAddress : const std::vector<std::string>&)
    + toJson : rapid_json::Object
    - m_host : std::string
    - m_ipAddress : std::vector<std::string>
  }

  class GetClusterInfoResponse
  {
    + GetClusterInfoResponse(in_clusterInfo : const ClusterInfo&)
    - m_clusterInfo : ClusterInfo
  }

  class ErrorResponse
  {
    + ErrorResponse(in_error : Error)
    - m_error : Error
  }

  class AbstractMain #lightblue
  {
    + {static} main(argc : int, argv : char**) : int
    + {abstract} createLauncherPluginApi() : AbstractPluginApi
  }

  together
  {
    enum "Request::Type" <<enum class>>
    {
      + HeartbeatRequest : 0
      + BootstrapRequest : 1
      + SubmitJobRequest : 2
      + GetJobRequest : 3
      + GetJobStatusRequest : 4
      + ControlJobRequest : 5
      + GetJobOutputRequest : 6
      + GetJobResourceUtilRequest : 7
      + GetJobNetworkRequest : 8
      + GetClusterInfoRequest : 9
    }

    enum "Response::Type" <<enum class>>
    {
      + ErrorResponse = -1
      + Heartbeat = 0
      + BootstrapResponse = 1
      + GetJobResponse = 2
      + GetJobStatusResponse = 3
      + ControlJobResponse = 4
      + GetJobOutputResponse = 5
      + GetJobResourceUtilResponse = 6
      + GetJobNetworkResponse = 7
      + GetClusterInfoResponse = 8
    }

    enum ControlOperation <<enum class>>
    {
      + Suspend
      + Resume
      + Stop
      + Kill
      + Cancel
      + {static} fromString(in_str : const std::string&, out_operation : ControlOperation&) : Error
      + {static} toString(in_operation : ControlOperation) : std::string
    }

    enum JobOutputType <<enum class>>
    {
      + Stdout = 0
      + Stderr = 1
      + Both = 2
      + {static} fromString(in_typeStr : const std::string&, out_type : JobOutputType&) : Error
    }

    "Request::Type" -[hidden] "Response::Type"
    "Request::Type" -[hidden]- ControlOperation
    ControlOperation -[hidden] JobOutputType

    note "Static methods on enums will likely end up as functions in a similarly (or same) named namespace since enums can't have methods." as EnumNote
    EnumNote .up. JobOutputType
    EnumNote .up. ControlOperation
  }

  AbstractMain --> AbstractPluginApi : creates
  AbstractFrameworkCommunicator <--> AbstractPluginApi : uses
  AbstractPluginApi *--> IJobSource : creates
  AbstractPluginApi *--> IJobRepository : creates
  AbstractPluginApi *--> JobStatusNotifier : creates
  AbstractPluginApi *--> JobPruner : creates
  AbstractPluginApi *--> IJobStatusWatcher : creates
  AbstractPluginApi *-- OutputStreamManager
  AbstractPluginApi *-- ResourceStreamManager
  AbstractPluginApi --> ResponseId : uses
  HeartbeatTimer --|> AbstractTimedEvent
  AbstractFrameworkCommunicator *-- HeartbeatTimer
  AbstractFrameworkCommunicator <|-- StdIOFrameworkCommunicator
  AbstractFrameworkCommunicator --> MessageHandler

  Request <|-- BootstrapRequest
  Request <|-- SubmitJobRequest
  Request <|-- JobIdRequest
  JobIdRequest <|-- GetJobRequest
  JobIdRequest <|-- GetJobStatusRequest
  JobIdRequest <|-- ControlJobRequest
  JobIdRequest <|-- GetJobOutputRequest
  JobIdRequest <|-- GetJobResourceUtilRequest
  JobIdRequest <|-- GetJobNetworkRequest
  Request <|-- GetClusterInfoRequest

  Response <|-- HeartbeatResponse
  Response <|-- BootstrapResponse
  Response <|-- GetJobResponse
  Response <|-- GetJobStatusResponse
  Response <|-- ControlJobResponse
  Response <|-- GetJobOutputResponse
  Response <|-- GetJobResourceUtilResponse
  Response <|-- GetJobNetworkResponse
  Response <|-- GetClusterInfoResponse
  Response <|-- ErrorResponse

  HeartbeatTimer .right. JPWNote
}

' The default layout is not very nice. This section helps to mitigate some of the layout issues.
AbstractFrameworkCommunicator -[hidden] Request
Request -[hidden] Response
AbstractMain -[hidden] AbstractFrameworkCommunicator

GetJobStatusResponse -[hidden]- ControlJobResult
ControlJobResult -[hidden] NetworkInfo
NetworkInfo -[hidden] ClusterInfo

HeartbeatTimer -[hidden] MessageHandler
NfsMount -[hidden] JobRepository
JobRepository -[hidden] JobPruner

Job -[hidden] ExposedPort
ExposedPort -[hidden] HostMount
HostMount -[hidden] NfsMount
Job -[hidden]- Mount
Mount -[hidden] JobConfig
JobConfig -[hidden] Container
Container -[hidden] PlacementConstraint

LPApiPackage -[hidden]- JMPackage
JMPackage -[hidden]- JobApiPackage

@enduml
